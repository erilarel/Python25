import sounddevice as sd  # –†–∞–±–æ—Ç–∞ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º
import numpy as np  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö
import speech_recognition as sr  # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
from datetime import datetime  # –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫


class VoiceToTextConverter:
    def __init__(self):
        self.recognizer = sr.Recognizer()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è
        self.recognizer.pause_threshold = 1.5  # –ü–∞—É–∑–∞ –¥–ª—è –∫–æ–Ω—Ü–∞ —Ñ—Ä–∞–∑—ã (—Å–µ–∫)
        self.sample_rate = 16000  # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        self.recognizer.energy_threshold = 4000  # –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞

    def record_voice(self, duration=10):
        """–ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
        print(f"\nüé§ –ó–∞–ø–∏—Å—å... (–º–∞–∫—Å. {duration} —Å–µ–∫)")
        audio = sd.rec(  # –ó–∞–ø–∏—Å—å –≤ –±—É—Ñ–µ—Ä
            int(duration * self.sample_rate),  # –ö–æ–ª-–≤–æ —Å—ç–º–ø–ª–æ–≤
            samplerate=self.sample_rate,  # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
            channels=1,  # –ú–æ–Ω–æ-–∑–∞–ø–∏—Å—å
            dtype='float32'  # –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
        )
        sd.wait()  # –û–∂–∏–¥–∞–Ω–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
        return audio

    def save_as_text(self, text, filename="voice_notes.txt"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–∞–π–ª"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        with open(filename, "a", encoding="utf-8") as f:  # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞
            f.write(f"[{timestamp}]\n{text}\n\n")  # –ó–∞–ø–∏—Å—å —Å –º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏
        print(f"‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")

    def process_voice_note(self):
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∑–∞–ø–∏—Å–∏ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        try:
            # 1. –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ
            audio = self.record_voice(duration=10)

            # 2. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ 16-–±–∏—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            audio_int16 = (audio * 32767).astype(np.int16)  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è

            # 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            audio_data = sr.AudioData(
                audio_int16.tobytes(),  # –ë–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
                sample_rate=self.sample_rate,  # –ß–∞—Å—Ç–æ—Ç–∞
                sample_width=2  # 16-–±–∏—Ç = 2 –±–∞–π—Ç–∞
            )

            # 4. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Google API
            text = self.recognizer.recognize_google(audio_data, language="ru-RU")
            print("\nüìù –¢–µ–∫—Å—Ç:", text)

            # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            self.save_as_text(text)
            return text

        except sr.UnknownValueError:  # –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ —Ä–µ—á—å
            print("‚ùå –†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
        except sr.RequestError as e:  # –û—à–∏–±–∫–∞ API
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {e}")
        except Exception as e:  # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    vtt = VoiceToTextConverter()  # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
    vtt.process_voice_note()  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
"""
@file
@brief –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Streamlit –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–∏–∫–∞ —ç–º–æ—Ü–∏–π —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π.
@details
–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —ç–º–æ—Ü–∏–∏, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø–∏—Å–µ–π, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ —ç–º–æ—Ü–∏—è–º.
"""

import asyncio
from datetime import datetime, timezone
import pytz

import streamlit as st
import pandas as pd
import altair as alt

from scripts.voice_nika import VoiceToTextConverter
from scripts.emotion_class import EmotionDetector
from db.session import AsyncSessionLocal, init_db
from db.crud import NoteRepository

#: @brief –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —ç–º–æ—Ü–∏–π –∏ —ç–º–æ–¥–∑–∏/–∫–∞—Ä—Ç–∏–Ω–æ–∫.
name2smile = {
  "joy": ["üòä", "src/joy.jpg"],
  "interest": ["ü§î", "src/interest.jpg"],
  "surpise": ["üò≤", "src/surprised.jpg"],
  "sadness": ["üò¢", "src/sadness.jpg"],
  "anger": ["üò°", "src/angry1.jpg"],
  "disgust": ["ü§¢", "src/disgust.jpg"],
  "fear": ["üò®", "src/fear.jpg"],
  "guilt": ["üòî", "src/guilt.jpg"],
  "neutral": ["üòê", "src/norm1.jpg"]
}

# –≠–∫—Å–ø–µ—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ü–≤–µ—Ç–æ–≤
def get_emotion_color(emotion: str) -> str:
    colors = {
        "anger": "#ff5252, #d32f2f",
        "disgust": "#8bc34a, #689f38",
        "joy": "#ffeb3b, #fbc02d",
        "neutral": "#bdbdbd, #757575",
        "sadness": "#64b5f6, #1976d2"
    }
    return colors.get(emotion, "#bdbdbd, #757575")

@st.cache_resource(show_spinner="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö‚Ä¶")
def _prepare_database():
    """
    @brief –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    @details
    –°–æ–∑–¥–∞—ë—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç (—á–µ—Ä–µ–∑ init_db).
    """
    asyncio.run(init_db())

def _run(coro):
    """
    @brief –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∫–æ—Ä—É—Ç–∏–Ω—É –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    @param coro –ö–æ—Ä—É—Ç–∏–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è.
    @return –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—Ä—É—Ç–∏–Ω—ã.
    """
    return asyncio.run(coro)

def add_note(**fields):
    """
    @brief –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    @param fields –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ (text, emotion –∏ —Ç.–¥.)
    @return –°–ª–æ–≤–∞—Ä—å —Å —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–æ–π (NoteDTO).
    """
    async def _add():
        async with AsyncSessionLocal() as session:
            repo = NoteRepository(session)
            return await repo.add(**fields, as_dict=True)
    return _run(_add())

def update_note(note_id: int, new_text: str, emotion: str):
    """
    @brief –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏ —ç–º–æ—Ü–∏—é –∑–∞–º–µ—Ç–∫–∏.
    @param note_id ID –∑–∞–º–µ—Ç–∫–∏.
    @param new_text –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç.
    @param emotion –ù–æ–≤–∞—è —ç–º–æ—Ü–∏—è.
    @return –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ (NoteDTO).
    """
    async def _upd():
        async with AsyncSessionLocal() as session:
            repo = NoteRepository(session)
            return await repo.update(note_id, text=new_text, emotion=emotion, as_dict=True)
    return _run(_upd())

def delete_note(note_id: int):
    """
    @brief –£–¥–∞–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –ø–æ ID.
    @param note_id ID –∑–∞–º–µ—Ç–∫–∏.
    """
    async def _del():
        async with AsyncSessionLocal() as session:
            repo = NoteRepository(session)
            await repo.delete(note_id)
    _run(_del())

def list_notes(limit: int = 100):
    """
    @brief –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫.
    @param limit –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞–º–µ—Ç–æ–∫.
    @return –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ (NoteDTO).
    """
    async def _list():
        async with AsyncSessionLocal() as session:
            repo = NoteRepository(session)
            return await repo.list(limit=limit, as_dict=True)
    return _run(_list())

# ----------------- UI (Streamlit) -----------------
_prepare_database()

st.set_page_config(
    layout="wide",
    page_title="–õ–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–æ–π —Ç–µ–∫—Å—Ç–∞",
    page_icon="üìî",
)

st.markdown(
    """
    <style>
        [data-testid="stHorizontalBlock"] { align-items: flex-start; gap: 2rem; }
        .left-panel { width: 40%; }
        .right-panel { width: 60%; max-height: 80vh; overflow-y: auto; padding-right: 1rem; }
        .note-card {
            background: #f8f9fa; border-radius: 10px; padding: 1.5rem;
            margin-bottom: 1.5rem; border-left: 4px solid #4e8cff;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        .stButton>button { transition: all 0.2s; }
        .stButton>button:hover { transform: translateY(-2px); }
        .stTextArea textarea { min-height: 200px !important; }
        .main-title { color: #4e8cff !important; margin-bottom: 0.5rem !important; }
    </style>
    """,
    unsafe_allow_html=True,
)

st.markdown(
    '<h1 class="main-title">–õ–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–æ–π —Ç–µ–∫—Å—Ç–∞</h1>',
    unsafe_allow_html=True
)
st.markdown("---")


# ----------------- Session state init -----------------
if 'notes' not in st.session_state:
    st.session_state.notes = []
if 'current_text' not in st.session_state:
    st.session_state.current_text = ""
if 'input_mode' not in st.session_state:
    st.session_state.input_mode = "text"
if "voice_converter" not in st.session_state:
    st.session_state.voice_converter = VoiceToTextConverter()
if "e_detector" not in st.session_state:
    st.session_state.e_detector = EmotionDetector()
if "recognized_text" not in st.session_state:
    st.session_state.recognized_text = ""
if "is_recording" not in st.session_state:
    st.session_state.is_recording = False
if "editing_note_id" not in st.session_state:
    st.session_state.editing_note_id = None

# ---- –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü ----
st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
page = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É", ["–î–Ω–µ–≤–Ω–∏–∫", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"])


# ----------------- –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è -----------------
if page == "–î–Ω–µ–≤–Ω–∏–∫":
    col1, col2 = st.columns([0.4, 0.6], gap="large")

    with col1:
        st.subheader("–§–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏")

        mode = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏:", ["‚úèÔ∏è –¢–µ–∫—Å—Ç", "üé§ –ê—É–¥–∏–æ"], index=0, label_visibility="collapsed"
        )

        if mode == "‚úèÔ∏è –¢–µ–∫—Å—Ç":
            with st.form("text_entry_form", clear_on_submit=True):
                note_content = st.text_area(
                    "–í–∞—à–∞ –∑–∞–ø–∏—Å—å:",
                    placeholder="–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞...",
                    height=250,
                    label_visibility="collapsed"
                )

                submitted = st.form_submit_button(
                    "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É",
                    type="primary",
                    use_container_width=True)

                if submitted and note_content.strip():
                    emotion = st.session_state.e_detector.start(note_content)
                    add_note(text=note_content, emotion=emotion, score=None, source="text", audio_path=None)
                    st.rerun()

        else:
            if not st.session_state.get('is_recording', False):
                if st.button("üé§ –ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –∑–∞–ø–∏—Å—å", use_container_width=True):
                    st.session_state.is_recording = True
                    st.session_state.voice_converter = VoiceToTextConverter()  # –¥–≤–∞–∂–¥—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
                    st.session_state.voice_converter.start_recording()
                    st.rerun()
            else:
                if st.button("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", type="primary", use_container_width=True):
                    st.session_state.voice_converter.stop_recording()

                    with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏..."):
                        try:
                            audio_data = st.session_state.voice_converter.get_audio_data()
                            if audio_data is not None:
                                try:
                                    st.session_state.recognized_text = st.session_state.voice_converter.audio_to_text(
                                        audio_data)
                                    st.success("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞!")
                                except RuntimeError as e:
                                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                            else:
                                st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ")
                        except Exception as e:
                            st.error(f"‚õî –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
                        finally:
                            st.session_state.is_recording = False
                            st.rerun()

                if st.session_state.get('is_recording', False):
                    st.warning("üéôÔ∏è –ò–¥—ë—Ç –∑–∞–ø–∏—Å—å... –ì–æ–≤–æ—Ä–∏—Ç–µ —á—ë—Ç–∫–æ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω")
                    st.caption("–ù–∞–∂–º–∏—Ç–µ '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å' –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ")

            if st.session_state.recognized_text:
                with st.form("audio_entry_form", clear_on_submit=True):
                    note_content = st.text_area(
                        "–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:",
                        value=st.session_state.recognized_text,
                        height=150,
                        label_visibility="collapsed"
                    )

                    submitted = st.form_submit_button(
                        "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É",
                        type="primary",
                        use_container_width=True
                    )

                    if submitted and note_content.strip():
                        emotion = st.session_state.e_detector.start(note_content)
                        add_note(text=note_content, emotion=emotion, score=None, source="audio", audio_path=None)
                        st.session_state.recognized_text = ""
                        st.rerun()

    with col2:
        st.subheader("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π")
        notes = list_notes(limit=100)

        if not notes:
            st.info("–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏")
        else:
            for note in notes:

                nid = note["id"]
                # disp = datetime.fromisoformat(note["created_at"]).strftime("%d.%m.%Y %H:%M")

                moscow_tz = pytz.timezone('Europe/Moscow')
                created_at = datetime.fromisoformat(note["created_at"]).replace(tzinfo=timezone.utc)
                disp = created_at.astimezone(moscow_tz).strftime("%d.%m.%Y %H:%M")

                if st.session_state.editing_note_id == nid:
                    with st.form(f"edit_form_{nid}"):
                        edited_text = st.text_area("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É:", value=note['text'], height=150)
                        emotion = st.session_state.e_detector.start(edited_text)

                        c1, c2 = st.columns(2)
                        if c1.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
                            update_note(nid, edited_text, emotion)
                            st.session_state.editing_note_id = None
                            st.rerun()
                        if c2.form_submit_button("–û—Ç–º–µ–Ω–∞"):
                            st.session_state.editing_note_id = None
                            st.rerun()
                    st.markdown("---")
                    continue

                with st.container():
                    # st.image(name2smile[note.get('emotion', 'üòä')][1], width=800)
                    # st.markdown(
                    #     f"""
                    #                <div class=\"note-card\">
                    #                  <div style=\"display:flex;justify-content:space-between;align-items:center;margin-bottom:0.5rem;\">
                    #                    <div style=\"display:flex;align-items:center;gap:0.5rem;\">
                    #                      <span style=\"font-size:1.5rem;\">{name2smile[note.get('emotion', 'üòä')][0]}</span>
                    #                      <h4 style=\"margin:0;\">–ó–∞–ø–∏—Å—å –æ—Ç {disp}</h4>
                    #                    </div>
                    #                    <small style=\"color:#666;\">#ID {nid}</small>
                    #                  </div>
                    #                  <div style=\"white-space:pre-wrap;padding:0.5rem 0;line-height:1.6;\">{note['text']}</div>
                    #                </div>
                    #                """,
                    #     unsafe_allow_html=True,
                    # )

                    current_emotion = note.get('emotion', 'neutral')
                    emotion_emoji = name2smile[current_emotion][0]
                    image_path = name2smile[current_emotion][1]

                    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-—à–∞–ø–∫–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —à–∏—Ä–∏–Ω–æ–π
                    st.image(
                        image_path,
                        use_container_width=True,
                        output_format='PNG'
                    )

                    # –ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–ø–∏—Å–∏ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º —Å–º–∞–π–ª–∞
                    st.markdown(
                        f"""
                        <div class="note-card">
                            <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:0.5rem;">
                                <div style="display:flex;align-items:center;gap:0.5rem;">
                                    <span style="font-size:1.8rem;">{emotion_emoji}</span>
                                    <h4 style="margin:0;">–ó–∞–ø–∏—Å—å –æ—Ç {disp}</h4>
                                </div>
                                <small style="color:#666;">#ID {nid}</small>
                            </div>
                            <div style="white-space:pre-wrap;padding:0.5rem 0;line-height:1.6;">{note['text']}</div>
                        </div>
                        """,
                        unsafe_allow_html=True
                    )

                    edit_col, btn_col, empty = st.columns([0.1, 2.5, 0.1])
                    with btn_col:
                        if st.button("üóë", key=f"del-{nid}"):
                            delete_note(nid)
                            st.rerun()
                    with edit_col:
                        if st.button("‚úèÔ∏è", key=f"edit-{nid}"):
                            st.session_state.editing_note_id = nid
                            st.rerun()
                    st.markdown("---")


if page == "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
    st.header("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–º–µ—Ç–æ–∫")
    notes = list_notes(limit=10000)
    if not notes:
        st.info("–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    else:
        df = pd.DataFrame(notes)
        df['created_at'] = pd.to_datetime(df['created_at'])
        df['date'] = df['created_at'].dt.date
        df['hour'] = df['created_at'].dt.hour
        try:
            df['weekday'] = df['created_at'].dt.day_name(locale='ru_RU')
        except Exception:
            df['weekday'] = df['created_at'].dt.day_name()

        # 1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π
        counts = df['emotion'].value_counts().rename_axis('emotion').reset_index(name='count')
        pie = alt.Chart(counts).mark_arc(innerRadius=50).encode(
            theta='count:Q', color='emotion:N', tooltip=['emotion', 'count']
        )
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π")
        st.altair_chart(pie, use_container_width=True)

        # 2. –≠–º–æ—Ü–∏–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        st.subheader("–≠–º–æ—Ü–∏–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
        week_counts = df.groupby(['weekday', 'emotion']).size().reset_index(name='count')
        heat = alt.Chart(week_counts).mark_rect().encode(
            x=alt.X('weekday:N',
                    sort=['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']),
            y=alt.Y('emotion:N'),
            color='count:Q',
            tooltip=['weekday', 'emotion', 'count']
        )
        st.altair_chart(heat, use_container_width=True)

        # 3. –¢—Ä–µ–Ω–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –∏ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ (7 –¥–Ω–µ–π)
        daily = df.groupby('date').size().reset_index(name='count')
        daily['rolling'] = daily['count'].rolling(7, min_periods=1).mean()
        st.subheader("–¢—Ä–µ–Ω–¥ –∑–∞–ø–∏—Å–µ–π")
        line = alt.Chart(daily).mark_line(point=True).encode(
            x=alt.X('date:T', title='–î–∞—Ç–∞'),
            y='count:Q',
            tooltip=['date', 'count']
        )
        roll = alt.Chart(daily).mark_line(strokeDash=[4, 2]).encode(
            x='date:T', y='rolling:Q', tooltip=['date', 'rolling']
        )
        st.altair_chart((line + roll), use_container_width=True)

        # 4. –ë–æ–∫—Å–ø–ª–æ—Ç –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ –ø–æ —ç–º–æ—Ü–∏—è–º
        st.subheader("–î–ª–∏–Ω–∞ –∑–∞–º–µ—Ç–æ–∫ –ø–æ —ç–º–æ—Ü–∏—è–º")
        df['text_len'] = df['text'].str.len()
        box = alt.Chart(df).mark_boxplot().encode(
            x='emotion:N', y='text_len:Q', color='emotion:N', tooltip=['emotion', 'text_len']
        )
        st.altair_chart(box, use_container_width=True)

        # 5. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —á–∞—Å–∞–º")
        hour_counts = df['hour'].value_counts().sort_index().reset_index(name='count').rename(columns={'index': 'hour'})
        hist = alt.Chart(hour_counts).mark_bar().encode(
            x=alt.X('hour:O', title='–ß–∞—Å —Å—É—Ç–æ–∫'), y='count:Q', tooltip=['hour', 'count']
        )
        st.altair_chart(hist, use_container_width=True)

        # 6. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.subheader("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        most_common = counts.loc[counts['count'].idxmax(), 'emotion']
        col1, col2, col3, col4 = st.columns(4)
        col1.metric("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", df.shape[0])
        col2.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–º–æ—Ü–∏–π", df['emotion'].nunique())
        col3.metric("–ß–∞—â–µ –≤—Å–µ–≥–æ", most_common)
        col4.metric("–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞", f"{df['text_len'].mean():.1f} —Å–∏–º–≤–æ–ª–æ–≤")
